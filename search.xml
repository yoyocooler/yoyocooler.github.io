<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一章 绪论</title>
      <link href="/undefined/dcf64845.html"/>
      <url>/undefined/dcf64845.html</url>
      
        <content type="html"><![CDATA[<p>🚗文档目录：</p><p>🚀<a href="">绪论</a>&nbsp; &nbsp; 🚲<a href="">线性表</a></p><hr><h1 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><em>描述客观事物的数值、字符以及能输入计算机且能被处理的各种符号集合。</em></p><p><strong>特点：</strong></p><ol><li><p>可被计算机接收</p></li><li><p>可被加工</p></li></ol><p><strong>构成：</strong></p><ol><li><p>数据元素</p></li><li><p>数据对象</p></li></ol><h2 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h2><p><em>组成数据的<strong>基本单位</strong>，是数据集合的个体。</em></p><p>数据项：有独立意义的最小单位</p><p>n个<u>数据项</u>【单元格】→m个<u>数据元素</u>（记录）【行】→<u>数据</u>【表】</p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p><em><u>性质相同</u>的<u>数据元素</u>的集合，是数据的一个子集。</em></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>定义：</strong> 相互之间存在一种或多种特定关系的数据元素集合。（<u>数据元素集合</u>及<u>元素间关系的集合</u>）</p><p><strong>研究：</strong> 数据元素之间的<u>相互关系</u>与<u>组织方式</u>，以及对其施加的<u>运算及运算规则</u>。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>一组<u>性质相同</u>的<strong>值集合</strong>以及定义在这个值集合上的一组<strong>操作</strong>的总称。（即该类型的<strong>取值范围</strong>+该类型种可允许使用的一组<strong>运算</strong>）</p><p><strong>按”值“的不同特性分类：</strong></p><ol><li><p>原子类型：其值不可再分，如整型、实型、字符型及指针。</p></li><li><p>结构类型：其成分既可以是原子，又可以是结构。</p></li></ol><h2 id="抽象数据类型（ADT）"><a href="#抽象数据类型（ADT）" class="headerlink" title="抽象数据类型（ADT）"></a>抽象数据类型（ADT）</h2><p><em>定义了一个<u>数据对象</u>、数据对象种各元素间的<u>结构关系</u>、一组处理数据的<u>操作</u></em>。</p><p><strong>最重要的特点是数据抽象与信息隐蔽</strong></p><p><strong>格式：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ADT&lt;ADT名&gt;</span><br><span class="line">&#123;</span><br><span class="line">    数据对象:&lt;数据对象的定义&gt;</span><br><span class="line">    结构关系:&lt;结构关系的定义&gt;</span><br><span class="line">    基本操作:</span><br><span class="line">    &lt;操作名称&gt;(参数表)</span><br><span class="line">        操作前提:&lt;操作前提描述&gt;</span><br><span class="line">        操作结果:&lt;操作结果描述&gt;</span><br><span class="line">&#125;ADT&lt;ADT名&gt;</span><br></pre></td></tr></table></figure><h1 id="数据结构的内容"><a href="#数据结构的内容" class="headerlink" title="数据结构的内容"></a>数据结构的内容</h1><p>按某种逻辑关系组织起来的一批数据，按一定的映像方式将其存放在计算机的存储器中，并在这些数据上定义一个运算的集合。</p><h2 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h2><p><em>数据元素之间的逻辑关系描述。</em></p><p>数据结构是一个二元组：(D,R)，D是数据元素的有限集，R是D上的关系集。</p><p><strong>基本结构：</strong></p><ol><li><p>集合结构：属于同一集合，但无任何其他关系</p></li><li><p>线性结构：一对一的线性关系</p></li><li><p>树形结构：一对多的层次关系</p></li><li><p>图结构或网状结构：多对多的任意关系</p></li></ol><p>可概括如下：</p><p>—线性结构——线性表、栈、队、字符串、数组、广义表</p><p>逻辑结构</p><p>—非线性结构——树、图</p><h2 id="数据结构的存储结构（物理结构）"><a href="#数据结构的存储结构（物理结构）" class="headerlink" title="数据结构的存储结构（物理结构）"></a>数据结构的存储结构（物理结构）</h2><p>逻辑结构在计算机中的存储映像，包括<u>数据元素映像</u>和<u>关系映像</u>。</p><p>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</p><p>存储结构分为：顺序存储结构、非顺序存储结构</p><h2 id="数据的运算集合"><a href="#数据的运算集合" class="headerlink" title="数据的运算集合"></a>数据的运算集合</h2><p>如增删改查等操作。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>规则的有限集合，是为了解决特定问题而规定的一系列操作。</p><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><ol><li><p><strong>有限性</strong>：有限步骤之内正常结束，不能形成无限循环。</p></li><li><p><strong>确定性</strong>：每个步骤有确定含义，无二义性。</p></li><li><p><strong>可行性</strong>：原则上能精确进行。</p></li><li><p>输入：有多个或0个输入。</p></li><li><p>输出：至少有一个或多个输出。</p></li></ol><h2 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h2><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><ol><li><p>对于几组输入数据能得到满足要求的结果。</p></li><li><p>对于典型、苛刻的输入数据能得到满足要求的结果。</p></li><li><p>对于一切合法的输入数据能得到满足要求的结果。</p></li></ol><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>便于人们理解和相互交流</p><h3 id="健壮性（鲁棒性）"><a href="#健壮性（鲁棒性）" class="headerlink" title="健壮性（鲁棒性）"></a>健壮性（鲁棒性）</h3><p>对非法输入的抵抗能力。</p><h3 id="高效率和低存储量（低耗）"><a href="#高效率和低存储量（低耗）" class="headerlink" title="高效率和低存储量（低耗）"></a>高效率和低存储量（低耗）</h3><p>执行时间越短效率越高，存储量指的是算法执行所需最大存储空间。</p><h1 id="算法性能评价"><a href="#算法性能评价" class="headerlink" title="算法性能评价"></a>算法性能评价</h1><h2 id="算法时间性能分析"><a href="#算法时间性能分析" class="headerlink" title="算法时间性能分析"></a>算法时间性能分析</h2><h3 id="算法耗费的时间"><a href="#算法耗费的时间" class="headerlink" title="算法耗费的时间"></a>算法耗费的时间</h3><p>所有语句执行时间的总和。每条语句的实行时间 = 该语句的执行次数 X 执行一次所需的实际时间</p><h3 id="语句频度"><a href="#语句频度" class="headerlink" title="语句频度"></a>语句频度</h3><p>该语句在一个算法中重复执行的次数。</p><p>算法时间分析的度量标准是根据算法中<u>语句的执行次数</u>估计的。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>语句总的执行次数$ f(n)$，$O$表示数量级。</p><p>时间复杂度 $T(n) = O( f(n) )$</p><h3 id="渐进时间复杂度"><a href="#渐进时间复杂度" class="headerlink" title="渐进时间复杂度"></a>渐进时间复杂度</h3><p>与时间复杂度不予区分。</p><h3 id="常用时间复杂度"><a href="#常用时间复杂度" class="headerlink" title="常用时间复杂度"></a>常用时间复杂度</h3><ol><li><p><strong>常数型</strong>：O(1)</p></li><li><p><strong>线性型</strong>：O(n)</p></li><li><p>平方型：O(n<sup>2</sup>)</p></li><li><p>立方型：O(n<sup>3</sup>)</p></li><li><p>指数型：O(2<sup>n</sup>)</p></li><li><p><strong>对数型</strong>：O(log<sub>2</sub>n)</p></li><li><p><strong>二维型</strong>：O(nlog<sub>2</sub>n)</p></li></ol><h3 id="最坏时间复杂度和平均时间复杂度"><a href="#最坏时间复杂度和平均时间复杂度" class="headerlink" title="最坏时间复杂度和平均时间复杂度"></a>最坏时间复杂度和平均时间复杂度</h3><p>最坏情况下的时间复杂度；所有可能的输入实例均以等概率出现的情况下。</p><h2 id="算法空间性能分析"><a href="#算法空间性能分析" class="headerlink" title="算法空间性能分析"></a>算法空间性能分析</h2><h3 id="算法耗费的空间"><a href="#算法耗费的空间" class="headerlink" title="算法耗费的空间"></a>算法耗费的空间</h3><p>算法占用空间是算法实际占用的辅助空间的总和。</p><h3 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h3><p>时间复杂度 S(n) = O( f(n) )</p><h2 id="数据结构与c语言表示"><a href="#数据结构与c语言表示" class="headerlink" title="数据结构与c语言表示"></a>数据结构与c语言表示</h2><h3 id="用C语言表示抽象类型"><a href="#用C语言表示抽象类型" class="headerlink" title="用C语言表示抽象类型"></a>用C语言表示抽象类型</h3><h3 id="抽象数据类型的定义格式"><a href="#抽象数据类型的定义格式" class="headerlink" title="抽象数据类型的定义格式"></a>抽象数据类型的定义格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ADT Linear_list&#123;</span><br><span class="line">    数据元素</span><br><span class="line">    结构关系</span><br><span class="line">    基本操作：设L为Linear_List,则有</span><br><span class="line">    ① InitList(L):初始化空线性表。</span><br><span class="line">    ② ListLength(L):求线性表的表长</span><br><span class="line">    ③ GetData(L,i):取线性表的第i个元素</span><br><span class="line">    ④ InsList(L,i,b):在线性表第i个位置插入元素b</span><br><span class="line">    ⑤ DelList(L,i):删除线性表的第i个数据元素</span><br><span class="line">&#125;ADT Linear_list</span><br></pre></td></tr></table></figure><h3 id="用C语言实现抽线数据类型"><a href="#用C语言实现抽线数据类型" class="headerlink" title="用C语言实现抽线数据类型"></a>用C语言实现抽线数据类型</h3><ol><li><p>通过<u>结构体</u>将<u>基本数据类型</u>结合到一起，构成一个<strong>结构体类型</strong>，再用<strong>typedef</strong>为该类型或该类型指针<u>重新命名</u>。</p></li><li><p>typdef struct card Card，Card为struct card的别称。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
